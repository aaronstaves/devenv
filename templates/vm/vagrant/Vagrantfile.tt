$script = <<SCRIPT

	[% IF provider == "vmware_fusion" %]
	sed -i.bak 's/answer AUTO_KMODS_ENABLED_ANSWER no/answer AUTO_KMODS_ENABLED_ANSWER yes/g' /etc/vmware-tools/locations
	sed -i.bak 's/answer AUTO_KMODS_ENABLED no/answer AUTO_KMODS_ENABLED yes/g' /etc/vmware-tools/locations
	[% END %]

	# Override the resolv.conf with the local one
	if [ -f "/vagrant/resolv.conf" ]; then
		echo "Override the resolv.conf"
		cp "/vagrant/resolv.conf" /etc/resolv.conf
	fi

	if [ ! -f /etc/default/devenv ]; then

		echo "PROVISION START"

		apt-get update
		apt-get install -yqq --force-yes samba

		mkdir -p "[% user_home_dir %]"

		# u=rwx,g=rwx,o=rx
		umask 0002

		echo "export DEVENV_VAGRANT=1" >  /etc/default/devenv
		
		[% UNLESS home_dir %]
		mkdir -p /home/dev
		groupadd -g 2000 dev
		useradd -l -d /home/dev -s /bin/bash -M -g 2000 -u 200 dev
		echo "dev:dev" | chpasswd
		usermod -a -G vagrant dev

		echo "export DEVENV_MY_GID=2000"               >> /etc/default/devenv
		echo "export DEVENV_MY_UID=2000"               >> /etc/default/devenv

		[% ELSE %]

		echo "export DEVENV_MY_GID=1000"               >> /etc/default/devenv
		echo "export DEVENV_MY_UID=1000"               >> /etc/default/devenv

		[% END %]

		# Keep the work directory inside of the VM
		mkdir /work
		chown -R vagrant:vagrant /work

		echo "export DEVENV_MY_HOME=/home/dev"         >> /etc/default/devenv
		echo "export DEVENV_MY_WORK=/work"             >> /etc/default/devenv
		echo "export DEVENV_NAME=[% box_name %]"       >> /etc/default/devenv
		echo "export DEVENV_CONFIG_FILE=config.yml"    >> /etc/default/devenv
		echo "eval \\\$(/opt/devenv/bin/devenv init)"  >> /etc/default/devenv

		[% FOREACH service IN services %]
		mv "[% service.internal_temp_dir %]/services/[% service.name %]" /etc/avahi/services/
		[% END %]

		# Install DevEnv project
		#curl --silent -L https://cpanmin.us | perl - App::cpanminus
		mkdir -p /opt
		mv "[% service.internal_temp_dir %]/devenv" /opt
		cd /opt/devenv; carton

		hostname [% hostname %]

		echo "[% box_name %]"           >  /etc/hostname
		echo "127.0.0.1 localhost"      >  /etc/hosts
		echo "127.0.1.1 [% hostname %]" >> /etc/hosts
		echo "127.0.1.1 [% box_name %]" >> /etc/hosts

		echo ". /etc/default/devenv" >> /home/vagrant/.profile

		chmod a+rx /opt/devenv/etc/init.d/devenv

		[% IF system.extend_drive %]
		echo 'Adding more drive space'
		pvcreate /dev/sdb
		vgextend [% system.vg or "debian-vg" %] /dev/sdb
		lvextend /dev/[% system.vg or "debian-vg" %]/root /dev/sdb
		resize2fs /dev/[% system.vg or "debian-vg" %]/root 
		[% END %]

		[% IF system.swap %]
		echo 'Adding swapfile'
		fallocate -l [% system.swap %] /swapfile
		chmod 600 /swapfile
		mkswap /swapfile
		swapon /swapfile
		echo '/swapfile none swap defaults 0 0' >> /etc/fstab
		[% END %]

		[% IF config.vm.enable_samba %]
		echo 'Adding SAMBA'
		cp /vagrant/smb.conf /etc/samba
		/etc/init.d/smbd restart
		echo -ne "dev\ndev\n" | smbpasswd -a dev
		echo -ne "vagrant\nvagrant\n" | smbpasswd -a vagrant
		[% END %]

		echo "PROVISION END"
	fi

	[% IF config.vm.enable_samba %]
	/etc/init.d/smbd              restart
	[% END %]
	/etc/init.d/avahi-daemon      restart
	/opt/devenv/etc/init.d/devenv start

	exit 0

SCRIPT

Vagrant.configure(2) do |config|

	config.vm.box = "[% box or "devenv/debian-jessie" %]"

	[% IF home_dir %]
	config.vm.synced_folder "[% home_dir %]", "/home/dev", create: true
	[% END %]

	[% FOREACH share IN shares %]
	config.vm.synced_folder "[% share.src_dir %]", "[% share.dest_dir %]", create: [% IF share.create %]true[% ELSE %]false[% END %]
	[% END %]

	config.vm.network "private_network", type: "dhcp"

	[% IF provider == "virtualbox" %]

	config.vm.provider :virtualbox do |vb|

		vb.memory = [% system.memory or "1024" %]
		vb.cpus   = [% system.cpus   or "1" %]
		
		[% IF system.extend_drive %]
		if ARGV[0] == "up" && ! File.exist?("./disk1.vdi")
			vb.customize [
				'createhd',
				'--filename', "./disk1.vdi",
				'--format', 'VDI',
				'--size', [% system.extend_drive %]
    		]

			vb.customize [
				'storageattach', :id,
				'--storagectl', 'SATA Controller',
				'--port', 1, '--device', 0,
				'--type', 'hdd', '--medium',
				'./disk1.vdi'
			]
		end

		[% END %]
	end

 	[% END %]

	[% IF provider == "vmware_fusion" %]

	config.vm.provider :vmware_fusion do |vm|

		vm.vmx["memsize"] = [% system.memory or "1024" %]
		vm.vmx["numvcpus"] = [% system.cpus   or "1" %]

		file_to_disk = '[% instance_dir %]/disk1.vmdk'

		[% IF system.extend_drive %]
		if ARGV[0] == "up" && ! File.exist?(file_to_disk)

			vdiskmanager = '/Applications/VMware\ Fusion.app/Contents/Library/vmware-vdiskmanager'

			`#{vdiskmanager} -c -s [% system.extend_drive %] -a lsilogic -t 1 #{file_to_disk}`
		end

		vm.vmx['scsi0:1.filename'] = file_to_disk
		vm.vmx['scsi0:1.present']  = 'TRUE'
		vm.vmx['scsi0:1.redo']     = ''

		[% END %]

	end

	[% END %]

    config.vm.provision "shell", inline: $script

end
